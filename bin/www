const http = require("http");
let app = require("../app");

// catch 404 and send a not found message
app.use((req, res, next) => {
  res.status(404).json({ message: "Error 404: Not found" });
});

// always log the error
app.use((err, req, res, next) => {
  console.error("ERROR", req.method, req.path, err);
  // only if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500).json({ message: "Error 500: Server error" });
  }
});

let server = http.createServer(app);

server.on("error", error => {
  if (error.syscall !== "listen") {
    throw error;
  }
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
